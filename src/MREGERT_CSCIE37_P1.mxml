<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="955" minHeight="600"
			   creationComplete="application_creationCompleteHandler(event)">
	<fx:Metadata>
		// Strings resource file
		[ResourceBundle("resources")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import flash.globalization.CurrencyFormatter;
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.DateTimeNameStyle;
			import flash.globalization.LastOperationStatus;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			//******************************************
			// ATTRIBUTES
			[Bindable]
			protected var localeOptions: ArrayCollection = new ArrayCollection(["i-default", "en_US", "de_DE", "fr_FR", "ko_KR", "ja_JP", "ru_RU"]);
			
			
			/* Initially set the preferred locale to use the user's default linguistic preferences, as specified in the
			user's operating system settings. For example, such preferences are typically set using the "Control Panel"
			for Windows, or the "System Preferences" in Mac OS X.
			*/
			[Bindable]
			protected var preferredLocale: String = LocaleID.DEFAULT;

			/* Shows if the settings are coming from the OS or from the dropdown */
			[Bindable]
			protected var preferredLocaleFromOsSettings: Boolean;
			
			[Bindable]
			protected var preferredLocaleSupported: Boolean;
			
			[Bindable]
			protected var isRightToLeft: Boolean;
			
			/* Create a locale ID class.
			
			The LocaleID class provides methods for parsing and using locale ID names. This class supports locale ID
			names that use the syntax defined by the Unicode Technical Standard #35 (http://unicode.org/reports/tr35/).
			*/
			[Bindable]
			protected var localeId:LocaleID;
			
			/* The DateTimeFormatter class provides locale-sensitive formatting for Date objects and access to localized
			date field names. The methods of this class use functions and settings provided by the operating system.
			There are two ways to select a date time format: using a predefined pattern or a custom pattern. For most
			applications the predefined styles specified by the DateTimeStyle constants (LONG, MEDIUM, NONE, or SHORT
			should be used. These constants specify the default patterns for the requested locale or the default patterns
			based on the user's operating system settings.
			
			When an instance of this class is created, if the requested locale is supported by the operating system then
			the properties of the instance are set according to the conventions and defaults of the requested locale and
			the constructor's dateStyle and timeStyle parameters. If the requested locale is not available, then the
			properties are set according to a fallback or default system locale, which can be retrieved using the
			actualLocaleIDName property.
			
			This class contains additional methods to get localized strings for month names and weekday names, and to
			retrieve the first day of the week that can be used in a calendar picker or other similar application.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system,
			and the use of a fallback locale when a requested locale is not supported, different users can see different
			formatting results even when using the same locale ID.
			*/
			[Bindable]
			protected var dateTimeFormatter: DateTimeFormatter;
			
			/* The CurrencyFormatter class provides locale-sensitive formatting and parsing of currency values.
			
			The CurrencyFormatter class uses the data and functionality provided by the operating system and is designed
			to format currency values according to the conventions of a specific locale and type of currency. The position
			of the currency symbol, the negative symbol, the decimal separator, the grouping separator, the grouping
			pattern decimal separator, and other elements can vary depending on the locale.
			
			If the operating system supports the requested locale, the properties and currency type are set according to the
			conventions and defaults of the requested locale. If the requested locale is not available, then the properties
			are set according to a fallback or default system locale, which can be retrieved using the actualLocaleIDName
			property.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system, and the
			use of a fallback locale when a requested locale is not supported, different users can see different formatting
			results, even when using the same locale ID.
			*/
			[Bindable]
			protected var currencyFormatter: CurrencyFormatter;
			
			
			//******************************************
			// METHODS
			protected function application_creationCompleteHandler(event:FlexEvent):void {
				// Create a new date/time formatter object based on the preferred locale.
				dateTimeFormatter = new DateTimeFormatter(preferredLocale);
				
				// Determine if the preferred locale is from the OS settings
				if (preferredLocale == LocaleID.DEFAULT) {
					preferredLocaleFromOsSettings = true;
				} else {
					preferredLocaleFromOsSettings = false;
				}
				
				if (dateTimeFormatter.lastOperationStatus == LastOperationStatus.NO_ERROR) {
					preferredLocaleSupported = true;
				} else {
					preferredLocaleSupported = false;
				}
				
				// Create c currency formatter object based on the preferred locale.
				currencyFormatter = new CurrencyFormatter(preferredLocale);
				
				// Create a new locale ID object based on the locale name from the date time formatter
				localeId = new LocaleID(dateTimeFormatter.actualLocaleIDName);
				resourceManager.localeChain = [normalizeLocale(localeId.name), "en_US"]; // en_US is a fallback locale here if lang is not available
				isRightToLeft = localeId.isRightToLeft();
			}

			// Change Event Handler for the dropdown locale selector
			protected function localeSelecton_changeHandler(event:IndexChangeEvent):void {
				preferredLocale = String(localeOptions.getItemAt(localeSelecton.selectedIndex));
				var lang: String = String(localeOptions.getItemAt(localeSelecton.selectedIndex));
				resourceManager.localeChain = [lang, "en_US"]; // en_US is a fallback locale here if lang is not available
				// Reinitialize the app with the new settings
				application_creationCompleteHandler(null);
			}
			
			// Get the string for the first day of the week
			[Bindable (event="propertyChange")]
			protected function getFirstDayOfWeek():String {
				var weekDayNames: Vector.<String> = dateTimeFormatter.getWeekdayNames();
				var firstDayWeekIndex:int = dateTimeFormatter.getFirstWeekday();
				return weekDayNames[firstDayWeekIndex];
			}
			
			protected function vectorToArray(v: Object): Array {
				var ret: Array = new Array();
				for each(var str: String in v) {
					ret.push(str);
				}
				return ret;
			}
			
			protected function normalizeLocale(locale:String): String {
				var newString: String = locale.replace("-", "_");
				return newString;
			}
			
		]]>
	</fx:Script>
	<!-- BEGIN MXML -->
	<s:Scroller left="1" right="1" top="1" bottom="1">
		<s:Group>
			<s:Label x="100" y="10" text="NOTE: The value 'i-default' selects the locale and region configured by the browser/os"/>
			<s:DropDownList id="localeSelecton" x="100" y="30" dataProvider="{localeOptions}" change="localeSelecton_changeHandler(event)">
			</s:DropDownList>
			
			
			<s:Panel id="mainPanel" title="{resourceManager.getString('resources','appTitle')}"
					 verticalCenter="0" horizontalCenter="0" minWidth="400">
				<s:VGroup id="vg" top="10" left="10" right="10" bottom="10">
					<s:HGroup top="10" left="10" right="10">
						<s:Form id="form" color="#363636">
							<!-- Reduce the gap between the form items -->
							<s:layout>
								<s:FormLayout gap="-10"/>
							</s:layout>  
							
							<s:FormHeading label="{resourceManager.getString('resources', 'localeAttributesTitle')}" color="#000000"/>
							<s:FormItem id="lblPrefLocale" label="{resourceManager.getString('resources','prefLocale')}">
								<s:Label id="prefLocale" text="{localeId.name}"/>
							</s:FormItem>
							
							<s:FormItem id="lblPrefLocaleFromOsSettings" label="{resourceManager.getString('resources','prefLocaleFromOsSettings')}">
								<s:Label id="prefLocaleFromOsSettings" text="{resourceManager.getString('resources', preferredLocaleFromOsSettings.toString())}"/>
							</s:FormItem> 
							
							<s:FormItem id="lblPrefLocaleSupported" label="{resourceManager.getString('resources','prefLocaleSupported')}">
								<s:Label id="prefLocaleSupported" text="{resourceManager.getString('resources', preferredLocaleSupported.toString())}"/>
							</s:FormItem>
							
							<s:FormItem id="lblLanguage" label="{resourceManager.getString('resources','language')}">
								<s:Label id="language" text="{localeId.getLanguage()}"/>
							</s:FormItem>
							
							<s:FormItem id="lblRegion" label="{resourceManager.getString('resources','region')}">
								<s:Label id="region" text="{localeId.getRegion()}"/>
							</s:FormItem>
							
							<s:FormItem id="lblScript" label="{resourceManager.getString('resources','script')}">
								<s:Label id="script" text="{localeId.getScript()}"/>
							</s:FormItem>
							
							<s:FormItem id="lblRightToLeft" label="{resourceManager.getString('resources','rightToLeft')}">
								<s:Label id="rightToLeft" text="{resourceManager.getString('resources', isRightToLeft.toString())}"/>
							</s:FormItem>

							<s:FormItem id="lblCurrencySymbol" label="{resourceManager.getString('resources','currencySymbol')}">
								<s:Label id="currencySymbol" text="{currencyFormatter.currencySymbol}"/>
							</s:FormItem>

						</s:Form>
						
						<s:Form id="form2" color="#363636">
							<!-- Reduce the gap between the form items -->
							<s:layout>
								<s:FormLayout gap="-10"/>
							</s:layout>  
							<s:FormHeading label="{resourceManager.getString('resources', 'dtAttributesTitle')}" color="#000000"/>
							<s:FormItem id="lblFirstDayOfWeek" label="{resourceManager.getString('resources','firstDayOfWeek')}">
								<s:Label id="firstDayOfWeek" text="{getFirstDayOfWeek()}"/>
							</s:FormItem>
							<s:FormItem id="lblDateStyle" label="{resourceManager.getString('resources','dateStyle')}">
								<s:HGroup>
									<s:Label id="dateStyle" text="{dateTimeFormatter.getDateStyle()}"/>
									<s:Label id="dateStyleExample" text="(Example : {dateTimeFormatter.format(new Date())})"/>
								</s:HGroup>
							</s:FormItem>
							<s:FormItem id="lblTimeZone" label="{resourceManager.getString('resources','timeZone')}">
								<s:HGroup>
									<s:Label id="timeZone" text="UTC-{new Date().getTimezoneOffset() / 60}"/>
									<!--s:Label id="timeStyleExample" text="(Example : {dateTimeFormatter.format(today.toTimeString() as Date)})"/-->
								</s:HGroup>
							</s:FormItem>
							<s:FormItem id="lblDaysOfWeek" label="{resourceManager.getString('resources','daysOfWeek')}">
								<s:Label id="daysOfWeekFull" text="Full: {dateTimeFormatter.getWeekdayNames(DateTimeNameStyle.FULL)}"/>
								<s:Label id="daysOfWeekLong" text="Long: {dateTimeFormatter.getWeekdayNames(DateTimeNameStyle.LONG_ABBREVIATION)}"/>
								<s:Label id="daysOfWeekShort" text="Short: {dateTimeFormatter.getWeekdayNames(DateTimeNameStyle.SHORT_ABBREVIATION)}"/>
							</s:FormItem>
							<s:FormItem id="lblMonths" label="{resourceManager.getString('resources','months')}">
								<s:Label id="monthsFull" text="Full: {dateTimeFormatter.getMonthNames(DateTimeNameStyle.FULL)}"/>
								<s:Label id="monthsLong" text="Long: {dateTimeFormatter.getMonthNames(DateTimeNameStyle.LONG_ABBREVIATION)}"/>
								<s:Label id="monthsShort" text="Short: {dateTimeFormatter.getMonthNames(DateTimeNameStyle.SHORT_ABBREVIATION)}"/>
							</s:FormItem>
						</s:Form>
					</s:HGroup>
					<s:Form id="form3" color="#363636">
						<!-- Reduce the gap between the form items -->
						<s:layout>
							<s:FormLayout gap="-10"/>
						</s:layout>  
						<s:FormItem id="lblCalendarLocale" label="{resourceManager.getString('resources','calendarLocale')}">
							<s:Label id="calendarLocale" text="{preferredLocale}"/>
						</s:FormItem>
					</s:Form>
					<s:HGroup width="100%">
						<mx:DateChooser locale="{preferredLocale}"
										dayNames="{vectorToArray(dateTimeFormatter.getWeekdayNames(DateTimeNameStyle.SHORT_ABBREVIATION))}"
										monthNames="{vectorToArray(dateTimeFormatter.getMonthNames(DateTimeNameStyle.FULL))}"
										firstDayOfWeek="{dateTimeFormatter.getFirstWeekday()}"/>
						
						<mx:DateChooser locale="{preferredLocale}"
										dayNames="{vectorToArray(dateTimeFormatter.getWeekdayNames(DateTimeNameStyle.LONG_ABBREVIATION))}"
										monthNames="{vectorToArray(dateTimeFormatter.getMonthNames(DateTimeNameStyle.FULL))}"
										firstDayOfWeek="{dateTimeFormatter.getFirstWeekday()}"/>
					</s:HGroup>
				</s:VGroup>
			</s:Panel>
		</s:Group>
	</s:Scroller>
</s:Application>
